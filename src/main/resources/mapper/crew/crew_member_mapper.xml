<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC   "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd"
>

<mapper namespace="com.fitmate.crew.dao.CrewMemberDAO">
<select id="joinList" resultType="com.fitmate.crew.dto.CrewJoinDTO" parameterType="map">
	SELECT 
		A.*, 
		B.nick,
		C.profile
	FROM crew_join A 
	INNER JOIN member B ON B.user_id = A.join_id
	INNER JOIN profile C ON C.user_id = A.join_id
	<where>
	A.crew_idx = #{crew_idx} AND A.status = 1 
	<!--    searchFilter(1='크루원닉네임 검색'/ 2='크루원ID 검색')    -->
	<if test="searchFilter == 1 and searchKeyword != null and !searchKeyword.equals('')">
		AND B.nick LIKE CONCAT('%', #{searchKeyword}, '%') 
	</if>
	<if test="searchFilter == 2 and searchKeyword != null and !searchKeyword.equals('')">
		AND A.join_id LIKE CONCAT('%', #{searchKeyword}, '%') 
	</if>
	</where>
	<choose>
		<when test="orderBy != null and orderBy != ''">
			ORDER BY B.nick ${orderBy}
		</when>
		<otherwise>
			ORDER BY A.date DESC
		</otherwise>
	</choose>
</select>
<!-- 크루 가입신청 목록을 위한 크루 및 크루장정보 가져오기 -->
<select id="profileInfo" resultType="com.fitmate.crew.dto.CrewJoinDTO" parameterType="map">
	SELECT 
		A.name AS crew_name,
		A.crew_id AS leader_id,
		B.nick,
		C.profile
	FROM crew A
	INNER JOIN member B ON B.user_id = A.crew_id
	INNER JOIN profile C ON C.user_id = A.crew_id
	WHERE A.crew_idx = #{crew_idx}	
</select>

<!-- 크루장을 포함한 크루원 목록 가져오기 -->
<select id="memberList" resultType="com.fitmate.crew.dto.CrewMemberProfileDTO" parameterType="map">
	SELECT
		<!-- 크루명 --> 
		A.name AS crew_name,
		<!-- 크루장 id -->
		A.crew_id,
		<!-- 일반유저 id -->
		CM.member_id AS user_id,
		B.nick,
		C.profile
	FROM crew A
	INNER JOIN crew_member CM ON CM.crew_idx = A.crew_idx
	INNER JOIN member B ON B.user_id = CM.member_id
	INNER JOIN profile C ON C.user_id = CM.member_id
	<where>
	A.crew_idx = #{crew_idx} AND A.status = 1 
	<!--    searchFilter(1='크루원닉네임 검색'/ 2='크루원ID 검색')    -->
	<if test="searchFilter == 1 and searchKeyword != null and !searchKeyword.equals('')">
		AND B.nick LIKE CONCAT('%', #{searchKeyword}, '%') 
	</if>
	<if test="searchFilter == 2 and searchKeyword != null and !searchKeyword.equals('')">
		AND B.member_id LIKE CONCAT('%', #{searchKeyword}, '%') 
	</if>
	</where>
	<choose>
		<when test="orderBy != null and orderBy != ''">
			ORDER BY B.nick ${orderBy}
		</when>
		<otherwise>
			ORDER BY B.nick ASC
		</otherwise>
	</choose>
</select>


<update id="joinApproval" parameterType="map">
	UPDATE crew_join SET 
		status = #{status},
		date = #{date}
		WHERE join_idx = #{join_idx}
		AND status = 1
		AND crew_idx = #{crew_idx}
</update>

<insert id="crewMember" parameterType="map">
	INSERT INTO crew_member(crew_idx, member_id, join_date, status)
		VALUES(#{crew_idx}, #{join_id}, #{date}, 1)
</insert>

<!-- 크루원 프로필 -->
<select id="crewMemberDetail" parameterType="String" resultType="com.fitmate.crew.dto.CrewMemberProfileDTO">
    SELECT
        m.user_id,
        m.nick,
        m.email,
        m.birthday,
        p.status,
        p.profile,
        r.region_name,
        rs.regions_name,
        mb.mbtir_name,
        c.name AS crew_name,
        c.crew_id,
        cm.member_idx,
        cm.join_date
    FROM member m
    INNER JOIN profile p ON m.user_id = p.user_id
    LEFT JOIN region_sub rs ON rs.regions_idx = p.regions_idx
    LEFT JOIN region r ON r.region_idx = rs.region_idx
    LEFT JOIN mbti_r mb ON mb.mbtir_idx = p.mbtir_idx
    LEFT JOIN crew_member cm ON cm.member_id = m.user_id
    LEFT JOIN crew c ON c.crew_idx = cm.crew_idx
    WHERE m.user_id = #{member_id}
    AND cm.status = 1
    AND c.crew_idx = #{crew_idx}
</select>

<!-- 일반회원 프로필 -->
<select id="userMemberDetail" parameterType="String" resultType="com.fitmate.crew.dto.CrewMemberProfileDTO">
    SELECT
        m.user_id,
        m.nick,
        m.email,
        m.birthday,
        p.status,
        p.profile,
        r.region_name,
        rs.regions_name,
        mb.mbtir_name
    FROM member m
    INNER JOIN profile p ON m.user_id = p.user_id
    LEFT JOIN region_sub rs ON rs.regions_idx = p.regions_idx
    LEFT JOIN region r ON r.region_idx = rs.region_idx
    LEFT JOIN mbti_r mb ON mb.mbtir_idx = p.mbtir_idx
    WHERE
        m.user_id = #{member_id}
</select>

<!-- 크루멤버 추방하기  status가 0: 추방, 1: 크루원 -->
<update id="memberFire">
	UPDATE crew_member SET status = 0, leave_date = #{param2} 
		WHERE member_idx = #{param1} <!-- param1: member_idx -->
</update>

</mapper>